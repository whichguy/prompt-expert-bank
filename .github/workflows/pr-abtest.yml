name: PR A/B Test Comparison

on:
  issue_comment:
    types: [created]

jobs:
  abtest-comparison:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/abtest')
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: Add reaction to comment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: 'rocket'
          });
    
    - name: Get PR details
      id: pr-details
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          core.setOutput('base_ref', pr.data.base.ref);
          core.setOutput('head_ref', pr.data.head.ref);
          core.setOutput('pr_number', context.issue.number);
          
          // Parse the comment for configuration
          const comment = context.payload.comment.body;
          
          // Extract configuration from comment
          const configMatch = comment.match(/```(?:javascript|json)?\s*([\s\S]*?)```/);
          if (configMatch) {
            core.setOutput('config', configMatch[1].trim());
          }
    
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.pr-details.outputs.head_ref }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install @octokit/rest @anthropic-ai/sdk
    
    - name: Run A/B Test Comparison
      id: run-test
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        PR_NUMBER: ${{ steps.pr-details.outputs.pr_number }}
        BASE_REF: ${{ steps.pr-details.outputs.base_ref }}
        HEAD_REF: ${{ steps.pr-details.outputs.head_ref }}
      run: |
        cat << 'EOF' > run-abtest.js
        const { ABTest } = require('./scripts/abtest');
        const { Octokit } = require('@octokit/rest');
        const Anthropic = require('@anthropic-ai/sdk');
        const fs = require('fs');
        
        const octokit = new Octokit({
          auth: process.env.GITHUB_TOKEN
        });
        
        const anthropic = new Anthropic({
          apiKey: process.env.ANTHROPIC_API_KEY
        });
        
        async function runTest() {
          console.log('üî¨ Running A/B Test for PR #' + process.env.PR_NUMBER);
          
          // Parse comment configuration
          const commentConfig = process.env.COMMENT_CONFIG || `${{ steps.pr-details.outputs.config }}`;
          let config;
          
          try {
            // Try to parse as JSON-like config
            if (commentConfig && commentConfig.trim()) {
              // Clean up the config string
              const cleanConfig = commentConfig
                .replace(/(\w+):/g, '"$1":')  // Add quotes to keys
                .replace(/'/g, '"')  // Replace single quotes with double
                .replace(/,\s*}/g, '}');  // Remove trailing commas
              
              config = JSON.parse(cleanConfig);
            }
          } catch (e) {
            // Default configuration
            config = {
              expert: 'experts/code-review-expert.md',
              promptA: 'whichguy/prompt-expert-bank/prompts/code-reviewer-baseline.md@main',
              promptB: 'whichguy/prompt-expert-bank/prompts/code-reviewer-improved.md@' + process.env.HEAD_REF,
              context: ['scripts/abtest.js', 'templates/abtest-evaluation.md'],
              testScenario: 'Review code for security, quality, and best practices'
            };
          }
          
          const abTest = new ABTest({
            octokit,
            anthropic,
            owner: 'whichguy',
            repo: 'prompt-expert-bank'
          });
          
          console.log('Configuration:', JSON.stringify(config, null, 2));
          
          try {
            const result = await abTest.run(config);
            
            if (!result.success) {
              throw new Error(result.error || 'Test failed');
            }
            
            // Generate markdown report
            let report = '## üî¨ A/B Test Results\n\n';
            report += `**Winner:** ${result.winner === 'variant' ? 'üéâ Variant (B)' : 'üìç Baseline (A)'}\n`;
            report += `**Confidence:** ${result.confidence}\n\n`;
            
            if (result.metrics) {
              report += '### üìä Performance Metrics\n\n';
              report += '| Metric | Baseline (A) | Variant (B) | Difference |\n';
              report += '|--------|-------------|------------|------------|\n';
              
              const baseline = result.metrics.baseline;
              const variant = result.metrics.variant;
              
              const latencyDiff = ((variant.latency - baseline.latency) / baseline.latency * 100).toFixed(1);
              const tokenDiff = ((variant.totalTokens - baseline.totalTokens) / baseline.totalTokens * 100).toFixed(1);
              
              report += `| Response Time | ${baseline.latency}ms | ${variant.latency}ms | ${latencyDiff > 0 ? '+' : ''}${latencyDiff}% |\n`;
              report += `| Total Tokens | ${baseline.totalTokens} | ${variant.totalTokens} | ${tokenDiff > 0 ? '+' : ''}${tokenDiff}% |\n`;
              report += `| Input Tokens | ${baseline.inputTokens} | ${variant.inputTokens} | - |\n`;
              report += `| Output Tokens | ${baseline.outputTokens} | ${variant.outputTokens} | - |\n`;
              
              report += '\n### üìà Analysis\n\n';
              
              if (latencyDiff < 0) {
                report += `- ‚ö° Variant is **${Math.abs(latencyDiff)}% faster**\n`;
              } else if (latencyDiff > 0) {
                report += `- üê¢ Variant is **${latencyDiff}% slower**\n`;
              } else {
                report += '- ‚è±Ô∏è Similar response times\n';
              }
              
              if (tokenDiff < 0) {
                report += `- üí∞ Variant uses **${Math.abs(tokenDiff)}% fewer tokens** (more efficient)\n`;
              } else if (tokenDiff > 0) {
                report += `- üìù Variant uses **${tokenDiff}% more tokens**\n`;
              } else {
                report += '- üìä Similar token usage\n';
              }
            }
            
            if (result.threads && result.threads.evaluation) {
              report += '\n### üîç Evaluation Summary\n\n';
              
              // Extract key points from evaluation
              const evalText = result.threads.evaluation;
              
              // Look for winner declaration
              const winnerMatch = evalText.match(/\*\*Winner:\*\*\s*([^\n]+)/);
              if (winnerMatch) {
                report += `> ${winnerMatch[1]}\n\n`;
              }
              
              // Look for decision rationale
              const rationaleMatch = evalText.match(/\*\*Decision Rationale:\*\*\s*([^\n]+)/);
              if (rationaleMatch) {
                report += `**Why this choice:** ${rationaleMatch[1]}\n\n`;
              }
              
              // Look for key strengths
              const strengthsMatch = evalText.match(/\*\*Key Strengths of Winner:\*\*\s*([\s\S]*?)(?=\*\*|$)/);
              if (strengthsMatch) {
                report += '**Winning Strengths:**\n';
                const strengths = strengthsMatch[1].split('\n').filter(s => s.trim().startsWith('-'));
                strengths.slice(0, 3).forEach(s => report += s + '\n');
                report += '\n';
              }
            }
            
            report += '\n### üéØ Recommendation\n\n';
            
            if (result.winner === 'variant' && result.confidence !== 'low') {
              report += '‚úÖ **MERGE RECOMMENDED** - The variant shows clear improvements over the baseline.\n';
            } else if (result.winner === 'baseline') {
              report += '‚ö†Ô∏è **REVISION SUGGESTED** - The baseline performs better. Consider refining the changes.\n';
            } else {
              report += 'ü§î **FURTHER REVIEW NEEDED** - Results are inconclusive.\n';
            }
            
            report += '\n---\n';
            report += `*Test completed at ${new Date().toISOString()}*\n`;
            report += '*Powered by [ABTest Framework](https://github.com/whichguy/prompt-expert-bank)*';
            
            // Save report for artifact
            fs.writeFileSync('abtest-report.md', report);
            
            // Also save detailed results
            if (result.threads) {
              const detailed = {
                config,
                result,
                timestamp: new Date().toISOString()
              };
              fs.writeFileSync('abtest-detailed.json', JSON.stringify(detailed, null, 2));
            }
            
            console.log('Test completed successfully');
            process.exit(0);
            
          } catch (error) {
            console.error('Test failed:', error.message);
            
            let errorReport = `## ‚ùå A/B Test Failed\n\n`;
            errorReport += `**Error:** ${error.message}\n\n`;
            errorReport += 'Please check:\n';
            errorReport += '- File paths are correct\n';
            errorReport += '- Files exist in the specified branches\n';
            errorReport += '- Configuration syntax is valid\n';
            
            fs.writeFileSync('abtest-report.md', errorReport);
            process.exit(1);
          }
        }
        
        runTest();
        EOF
        
        node run-abtest.js
    
    - name: Post results to PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '';
          
          try {
            comment = fs.readFileSync('abtest-report.md', 'utf8');
          } catch (e) {
            comment = '## ‚ùå A/B Test Error\n\nFailed to generate report. Check workflow logs for details.';
          }
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ steps.pr-details.outputs.pr_number }},
            body: comment
          });
          
          // Add reaction to indicate completion
          await github.rest.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: 'hooray'
          });
    
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: abtest-results-${{ steps.pr-details.outputs.pr_number }}
        path: |
          abtest-report.md
          abtest-detailed.json