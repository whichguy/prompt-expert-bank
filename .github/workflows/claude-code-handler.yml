name: Claude Code PR Handler

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  checks: write

jobs:
  claude-code:
    # Only run if comment contains @prompt-expert and is on a PR or Issue
    if: |
      contains(github.event.comment.body, '@prompt-expert') &&
      (github.event.issue.pull_request || github.event.issue.number)
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Command
        id: check
        run: |
          echo "Comment from: ${{ github.event.comment.user.login }}"
          echo "On issue/PR: #${{ github.event.issue.number }}"
          
          # Determine if this is a PR or Issue
          if [ -n "${{ github.event.issue.pull_request }}" ]; then
            echo "context_type=pr" >> $GITHUB_OUTPUT
            echo "This is a Pull Request"
          else
            echo "context_type=issue" >> $GITHUB_OUTPUT
            echo "This is an Issue"
          fi
          
      - name: Get PR Details (if PR)
        if: steps.check.outputs.context_type == 'pr'
        id: pr_details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            core.setOutput('head_ref', pr.data.head.ref);
            core.setOutput('base_ref', pr.data.base.ref);
            core.setOutput('head_sha', pr.data.head.sha);
            console.log(`PR Branch: ${pr.data.head.ref} -> ${pr.data.base.ref}`);
            
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.check.outputs.context_type == 'pr' && steps.pr_details.outputs.head_ref || github.ref }}
          fetch-depth: 0  # Full history for git operations
          sparse-checkout: |
            scripts
            templates
            expert-definitions
            prompts
            package.json
          sparse-checkout-cone-mode: false
          
      - name: Setup Git Identity
        run: |
          git config --global user.name "Claude Code"
          git config --global user.email "claude@anthropic.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          # Install in the workflow scripts directory
          cd scripts
          npm init -y || true
          npm install @anthropic-ai/sdk@latest @octokit/rest@latest
          
          # Also install in the root for expert-loader
          cd ../..
          if [ ! -f package.json ]; then
            npm init -y
          fi
          npm install @anthropic-ai/sdk@latest @octokit/rest@latest
          
      - name: React to Comment
        uses: actions/github-script@v7
        with:
          script: |
            // Add eyes reaction to show we're processing
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });
            
      - name: Execute Claude Code Session
        id: claude_session
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          PR_NUMBER: ${{ steps.check.outputs.context_type == 'pr' && github.event.issue.number || '' }}
          ISSUE_NUMBER: ${{ steps.check.outputs.context_type == 'issue' && github.event.issue.number || '' }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          GITHUB_HEAD_REF: ${{ steps.pr_details.outputs.head_ref }}
          GITHUB_BASE_REF: ${{ steps.pr_details.outputs.base_ref }}
        run: |
          echo "Starting Claude Code session..."
          node scripts/claude-code-session.js
          
      - name: Push Changes (if any)
        if: steps.check.outputs.context_type == 'pr'
        run: |
          # Check if there are any changes to push
          if [[ -n $(git status --porcelain) ]]; then
            echo "Changes detected, committing..."
            git add -A
            git commit -m "Claude Code: Applied changes from session" || true
            
            # Push to the PR branch
            git push origin ${{ steps.pr_details.outputs.head_ref }} || {
              echo "Push failed, attempting to pull and retry..."
              git pull origin ${{ steps.pr_details.outputs.head_ref }} --rebase
              git push origin ${{ steps.pr_details.outputs.head_ref }}
            }
          else
            echo "No changes to push"
          fi
          
      - name: Update Reaction on Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            // Remove eyes and add rocket to show success
            const reactions = await github.rest.reactions.listForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id
            });
            
            const eyesReaction = reactions.data.find(
              r => r.user.login === 'github-actions[bot]' && r.content === 'eyes'
            );
            
            if (eyesReaction) {
              await github.rest.reactions.deleteForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                reaction_id: eyesReaction.id
              });
            }
            
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });
            
      - name: Update Reaction on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            // Remove eyes and add confused to show failure
            const reactions = await github.rest.reactions.listForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id
            });
            
            const eyesReaction = reactions.data.find(
              r => r.user.login === 'github-actions[bot]' && r.content === 'eyes'
            );
            
            if (eyesReaction) {
              await github.rest.reactions.deleteForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                reaction_id: eyesReaction.id
              });
            }
            
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'confused'
            });
            
            // Post error comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **Claude Code Session Failed**\n\nPlease check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`
            });