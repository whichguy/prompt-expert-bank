name: PromptExpert Issue Handler

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write

jobs:
  process-issue-expert:
    # Trigger on issues (not PRs) when @promptexpert is mentioned
    if: ${{ !github.event.issue.pull_request && contains(github.event.comment.body || github.event.issue.body, '@promptexpert') }}
    runs-on: ubuntu-latest
    steps:
      - name: Parse command
        id: parse
        run: |
          # Get the text to parse (comment body or issue body)
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            TEXT='${{ github.event.comment.body }}'
          else
            TEXT='${{ github.event.issue.body }}'
          fi
          
          # Extract expert name and instructions
          # Format: @promptexpert <expert> <instructions...>
          if [[ "$TEXT" =~ @promptexpert[[:space:]]+([a-zA-Z-]+)[[:space:]]+(.*) ]]; then
            EXPERT="${BASH_REMATCH[1]}"
            INSTRUCTIONS="${BASH_REMATCH[2]}"
            
            echo "expert=$EXPERT" >> $GITHUB_OUTPUT
            echo "instructions=$INSTRUCTIONS" >> $GITHUB_OUTPUT
            echo "valid=true" >> $GITHUB_OUTPUT
            
            echo "Parsed command:"
            echo "  Expert: $EXPERT"
            echo "  Instructions: $INSTRUCTIONS"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Checkout repository
        if: steps.parse.outputs.valid == 'true'
        uses: actions/checkout@v4
        
      - name: Setup environment
        if: steps.parse.outputs.valid == 'true'
        run: |
          npm init -y
          npm install @anthropic-ai/sdk @octokit/rest
          
      - name: Process issue with expert
        if: steps.parse.outputs.valid == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          EXPERT: ${{ steps.parse.outputs.expert }}
          INSTRUCTIONS: ${{ steps.parse.outputs.instructions }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          AUTHOR: ${{ github.event.comment.user.login || github.event.issue.user.login }}
        run: |
          node << 'SCRIPT'
          const { Anthropic } = require('@anthropic-ai/sdk');
          const { Octokit } = require('@octokit/rest');
          const fs = require('fs');
          const path = require('path');
          
          async function processIssue() {
            const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            
            // Get issue details
            const { data: issue } = await octokit.issues.get({
              owner,
              repo,
              issue_number: process.env.ISSUE_NUMBER
            });
            
            // Get issue comments
            const { data: comments } = await octokit.issues.listComments({
              owner,
              repo,
              issue_number: process.env.ISSUE_NUMBER
            });
            
            // Load expert definition
            let expertContent = '';
            try {
              const expertPath = path.join('.github', 'expert-definitions', `${process.env.EXPERT}-expert.md`);
              expertContent = fs.readFileSync(expertPath, 'utf-8');
            } catch (err) {
              expertContent = `You are a ${process.env.EXPERT} expert providing guidance and analysis.`;
            }
            
            // Call Claude with issue context
            const response = await anthropic.messages.create({
              model: 'claude-3-5-sonnet-20241022',
              max_tokens: 4000,
              messages: [{
                role: 'user',
                content: `## YOUR ROLE
You are responding to a GitHub issue as an expert. You will act as the expert defined below to provide guidance, analysis, or solutions.

## EXPERT DEFINITION
${expertContent}

## CONTEXT: GITHUB ISSUE
You are responding to a GitHub issue (not a pull request). Here's the context:

### Issue Details
- Title: ${issue.title}
- Number: #${issue.number}
- Author: @${issue.user.login}
- Created: ${issue.created_at}
- State: ${issue.state}
- Labels: ${issue.labels.map(l => l.name).join(', ') || 'none'}

### Issue Body
${issue.body || 'No description provided'}

### Recent Comments (last 5)
${comments.slice(-5).map(c => `@${c.user.login} (${c.created_at}):\n${c.body}`).join('\n\n---\n\n')}

## USER INSTRUCTIONS
User @${process.env.AUTHOR} has requested you to:
"${process.env.INSTRUCTIONS}"

## YOUR TASK
As the ${process.env.EXPERT} expert, analyze this issue and follow the user's instructions. Provide helpful guidance, analysis, or solutions based on your expertise.

## RESPONSE FORMAT
You must respond with a JSON object with this structure:
{
  "analysis": "Your detailed analysis of the issue",
  "response": "The main response/comment to post on the issue",
  "suggestions": [
    "Specific suggestion or action item 1",
    "Specific suggestion or action item 2"
  ],
  "resources": [
    {
      "title": "Resource name",
      "url": "https://example.com (if applicable)",
      "description": "Brief description"
    }
  ],
  "labels_to_add": ["label1", "label2"],
  "summary": "Brief one-line summary"
}

Return ONLY the JSON object, no other text.`
              }]
            });
            
            // Parse response
            let result;
            try {
              result = JSON.parse(response.content[0].text);
            } catch (err) {
              console.error('Failed to parse Claude response:', response.content[0].text);
              throw new Error('Invalid response format from Claude');
            }
            
            // Format and post the response
            let commentBody = `## ü§ñ ${process.env.EXPERT.charAt(0).toUpperCase() + process.env.EXPERT.slice(1)} Expert Response\n\n`;
            commentBody += `${result.response}\n\n`;
            
            if (result.suggestions && result.suggestions.length > 0) {
              commentBody += `### üí° Suggestions\n\n`;
              result.suggestions.forEach(s => {
                commentBody += `- ${s}\n`;
              });
              commentBody += `\n`;
            }
            
            if (result.resources && result.resources.length > 0) {
              commentBody += `### üìö Resources\n\n`;
              result.resources.forEach(r => {
                if (r.url) {
                  commentBody += `- [${r.title}](${r.url}) - ${r.description}\n`;
                } else {
                  commentBody += `- **${r.title}** - ${r.description}\n`;
                }
              });
              commentBody += `\n`;
            }
            
            commentBody += `---\n`;
            commentBody += `*Requested by @${process.env.AUTHOR} ‚Ä¢ Powered by PromptExpert*`;
            
            // Post the comment
            await octokit.issues.createComment({
              owner,
              repo,
              issue_number: process.env.ISSUE_NUMBER,
              body: commentBody
            });
            
            // Add labels if suggested
            if (result.labels_to_add && result.labels_to_add.length > 0) {
              try {
                await octokit.issues.addLabels({
                  owner,
                  repo,
                  issue_number: process.env.ISSUE_NUMBER,
                  labels: result.labels_to_add
                });
              } catch (err) {
                console.log('Could not add labels:', err.message);
              }
            }
          }
          
          processIssue().catch(async err => {
            console.error('Error:', err);
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            await octokit.issues.createComment({
              owner,
              repo,
              issue_number: process.env.ISSUE_NUMBER,
              body: `‚ùå PromptExpert encountered an error: ${err.message}`
            });
            process.exit(1);
          });
          SCRIPT
          
      - name: Handle invalid command
        if: steps.parse.outputs.valid != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Invalid PromptExpert command format**
              
**Expected format:**
\`\`\`
@promptexpert <expert> <instructions>
\`\`\`

**Examples for issues:**
\`\`\`
@promptexpert security help me understand this vulnerability
@promptexpert programming suggest a solution for this bug
@promptexpert financial analyze the ROI of this feature
\`\`\`

**Available experts:** security, programming, financial, data-analysis, general`
            })