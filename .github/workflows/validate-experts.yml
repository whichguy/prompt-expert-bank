name: Validate Expert Modules

on:
  push:
    paths:
      - 'experts/**'
      - 'test-scenarios/**'
      - 'package.json'
  pull_request:
    paths:
      - 'experts/**'
      - 'test-scenarios/**'
      - 'package.json'

jobs:
  validate-experts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Validate Expert Modules
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          const expertsDir = path.join(__dirname, 'experts');
          const testScenariosDir = path.join(__dirname, 'test-scenarios');
          const expertFiles = fs.readdirSync(expertsDir).filter(f => f.endsWith('.js'));
          
          let allValid = true;
          
          console.log('## Expert Module Validation\\n');
          
          for (const file of expertFiles) {
            const filePath = path.join(expertsDir, file);
            const expertName = file.replace('.js', '');
            console.log(\`### Checking \${file}\`);
            
            try {
              const expert = require(filePath);
              
              // Check required properties
              const required = ['name', 'testScenarios', 'evaluatePrompts', 'calculateMetrics', 'generateReport'];
              const missing = required.filter(prop => !expert[prop]);
              
              if (missing.length > 0) {
                console.log(\`❌ Missing required properties: \${missing.join(', ')}\`);
                allValid = false;
              } else {
                console.log('✅ All required properties present');
              }
              
              // Check test scenarios
              if (expert.testScenarios && Array.isArray(expert.testScenarios)) {
                console.log(\`✅ Loaded \${expert.testScenarios.length} test scenarios\`);
              } else {
                console.log('❌ Invalid or missing test scenarios');
                allValid = false;
              }
              
              // Check for corresponding test file
              const testFileName = \`\${expert.domain || expertName.replace('-expert', '')}-tests.js\`;
              const testFilePath = path.join(testScenariosDir, testFileName);
              if (fs.existsSync(testFilePath)) {
                console.log(\`✅ Test file found: \${testFileName}\`);
              } else {
                console.log(\`⚠️  No test file found: \${testFileName}\`);
              }
              
            } catch (error) {
              console.log(\`❌ Failed to load module: \${error.message}\`);
              allValid = false;
            }
            
            console.log('');
          }
          
          if (!allValid) {
            console.log('\\n❌ Validation FAILED');
            process.exit(1);
          } else {
            console.log('\\n✅ All expert modules are valid');
          }
          "
