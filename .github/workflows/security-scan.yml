name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  dependency-security:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd .github/scripts
          npm ci --audit-level=high

      - name: Security audit
        run: |
          cd .github/scripts
          npm audit --audit-level=high
          npm audit --audit-level=moderate --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: .github/scripts/audit-report.json

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  security-checklist:
    name: Security Configuration Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check security files
        run: |
          echo "🔍 Checking security configuration..."
          
          # Check for required security files
          if [ ! -f ".github/SECURITY.md" ]; then
            echo "❌ Missing SECURITY.md"
            exit 1
          else
            echo "✅ SECURITY.md present"
          fi
          
          if [ ! -f ".github/CODEOWNERS" ]; then
            echo "❌ Missing CODEOWNERS"
            exit 1
          else
            echo "✅ CODEOWNERS present"
          fi
          
          if [ ! -f "LICENSE" ]; then
            echo "❌ Missing LICENSE"
            exit 1
          else
            echo "✅ LICENSE present"
          fi

      - name: Check workflow security
        run: |
          echo "🔍 Checking workflow security..."
          
          # Check for secrets in workflow files
          if grep -r "secrets\." .github/workflows/ | grep -v "secrets\.GITHUB_TOKEN" | grep -v "secrets\.ANTHROPIC_API_KEY"; then
            echo "⚠️  Non-standard secrets found in workflows"
            grep -r "secrets\." .github/workflows/ | grep -v "secrets\.GITHUB_TOKEN" | grep -v "secrets\.ANTHROPIC_API_KEY"
          else
            echo "✅ No unexpected secrets in workflows"
          fi
          
          # Check for write permissions
          if grep -r "permissions:" .github/workflows/ | grep -A5 "write"; then
            echo "ℹ️  Write permissions found (review required):"
            grep -r "permissions:" .github/workflows/ -A5 | grep "write"
          fi

      - name: Expert definition security check
        run: |
          echo "🔍 Checking expert definitions for security..."
          
          # Check for potentially dangerous patterns in expert definitions
          find experts/ -name "*.md" -type f | while read -r file; do
            if grep -q "system(" "$file" || grep -q "exec(" "$file" || grep -q "eval(" "$file"; then
              echo "⚠️  Potentially dangerous patterns in $file"
              grep -n "system(\|exec(\|eval(" "$file" || true
            fi
          done
          
          echo "✅ Expert definition security check complete"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-security, secret-scan, security-checklist]
    if: always()
    
    steps:
      - name: Security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.codeql-analysis.result }}" = "success" ]; then
            echo "✅ CodeQL Analysis: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CodeQL Analysis: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.dependency-security.result }}" = "success" ]; then
            echo "✅ Dependency Security: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Dependency Security: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.secret-scan.result }}" = "success" ]; then
            echo "✅ Secret Scanning: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secret Scanning: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-checklist.result }}" = "success" ]; then
            echo "✅ Security Configuration: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Configuration: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed results, check individual job outputs above." >> $GITHUB_STEP_SUMMARY