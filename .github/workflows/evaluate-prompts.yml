name: Evaluate Prompt Changes

on:
  workflow_call:
    inputs:
      pr-number:
        required: true
        type: string
      repository:
        required: true
        type: string
      auto-close-on-fail:
        required: false
        type: boolean
        default: true
        description: 'Automatically close PR if evaluation fails'
    secrets:
      github-token:
        required: true
      anthropic-api-key:
        required: true

jobs:
  evaluate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout Expert Bank
        uses: actions/checkout@v3
        with:
          repository: whichguy/prompt-expert-bank
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Create package.json if needed
        run: |
          if [ ! -f package.json ]; then
            npm init -y
          fi
          
      - name: Install dependencies
        run: |
          npm install @anthropic-ai/sdk@0.24.0 @octokit/rest@19.0.0 @actions/core@1.10.0 @actions/github@5.1.1
        
      - name: Run evaluation
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
        run: |
          # Parse repository input
          IFS='/' read -r OWNER REPO <<< "${{ inputs.repository }}"
          
          # Create generic evaluation script
          cat > evaluate.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const { Anthropic } = require('@anthropic-ai/sdk');
          const { Octokit } = require('@octokit/rest');
          
          const OWNER = process.env.OWNER;
          const REPO = process.env.REPO;
          const PR_NUMBER = parseInt(process.env.PR_NUMBER);
          
          async function evaluate() {
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });
            
            console.log(`Evaluating PR #${PR_NUMBER} in ${OWNER}/${REPO}`);
            
            try {
              // Get PR files
              const { data: files } = await octokit.pulls.listFiles({
                owner: OWNER,
                repo: REPO,
                pull_number: PR_NUMBER
              });
              
              const promptFiles = files.filter(f => 
                f.filename.includes('prompt') && 
                (f.filename.endsWith('.md') || f.filename.endsWith('.txt'))
              );
              
              if (promptFiles.length === 0) {
                await octokit.issues.createComment({
                  owner: OWNER,
                  repo: REPO,
                  issue_number: PR_NUMBER,
                  body: '‚ùå No prompt files found in this PR'
                });
                return;
              }
              
              // Detect domain from filename and content
              let domain = null;
              
              for (const file of promptFiles) {
                const newContent = await getFileContent(octokit, OWNER, REPO, file.filename);
                
                // Try to detect domain from filename or content
                if (file.filename.includes('security') || newContent.toLowerCase().includes('security') ||
                   newContent.toLowerCase().includes('risk') || newContent.toLowerCase().includes('safety')) {
                  domain = 'security';
                } else if (file.filename.includes('code') || file.filename.includes('programming') || 
                         newContent.toLowerCase().includes('code review') || newContent.toLowerCase().includes('programming') ||
                         newContent.toLowerCase().includes('javascript') || newContent.toLowerCase().includes('python') ||
                         newContent.toLowerCase().includes('java') || newContent.toLowerCase().includes('react') ||
                         newContent.toLowerCase().includes('api') || newContent.toLowerCase().includes('function') ||
                         newContent.toLowerCase().includes('algorithm') || newContent.toLowerCase().includes('debug')) {
                  domain = 'programming';
                } else if (file.filename.includes('data') || newContent.toLowerCase().includes('data analysis') ||
                          newContent.toLowerCase().includes('analytics') || newContent.toLowerCase().includes('visualization')) {
                  domain = 'data-analysis';
                } else if (file.filename.includes('financial') || newContent.toLowerCase().includes('financial') ||
                          newContent.toLowerCase().includes('finance') || newContent.toLowerCase().includes('budget') ||
                          newContent.toLowerCase().includes('investment') || newContent.toLowerCase().includes('money')) {
                  domain = 'financial';
                } else {
                  // Default to general purpose expert for unmatched prompts
                  domain = 'general';
                }
                
                if (domain) break;
              }
              
              // Domain detection now always succeeds with 'general' as fallback
              
              // Try new architecture first
              let expertModule = null;
              
              try {
                // Check if lib directory exists
                if (fs.existsSync(path.join(__dirname, 'lib'))) {
                  const ExpertLoader = require('./lib/expert-loader');
                  const expertLoader = new ExpertLoader();
                  
                  // Check if we have a new-style expert for this domain
                  expertModule = expertLoader.getExpert(domain);
                }
              } catch (e) {
                console.log('New expert architecture not available, falling back to legacy');
              }
              
              if (!expertModule) {
                // Fall back to old-style expert
                const expertPath = path.join(__dirname, 'experts', `${domain}-expert.js`);
                
                if (!fs.existsSync(expertPath)) {
                  await octokit.issues.createComment({
                    owner: OWNER,
                    repo: REPO,
                    issue_number: PR_NUMBER,
                    body: `‚ö†Ô∏è No expert module found for domain: ${domain}. Please check available experts.`
                  });
                  return;
                }
                
                // Load old-style expert module
                const legacyExpert = require(expertPath);
                
                // Wrap legacy expert if needed
                if (fs.existsSync(path.join(__dirname, 'lib', 'legacy-expert-adapter.js'))) {
                  const LegacyExpertAdapter = require('./lib/legacy-expert-adapter');
                  expertModule = new LegacyExpertAdapter(legacyExpert);
                } else {
                  expertModule = legacyExpert;
                }
              }
              
              // Process each changed file
              let fullReport = `## üè¶ Prompt Expert Bank - Evaluation Report\n\n`;
              fullReport += `*Domain Expert: ${expertModule.name || domain}*\n`;
              fullReport += `*Timestamp: ${new Date().toISOString()}*\n\n`;
              
              let overallRecommendation = 'APPROVE';
              let totalImprovement = 0;
              
              for (const file of promptFiles) {
                fullReport += `## üìÑ File: ${file.filename}\n\n`;
                fullReport += `### Change Summary\n`;
                fullReport += `- **Status**: ${file.status}\n`;
                fullReport += `- **Lines changed**: +${file.additions} -${file.deletions}\n\n`;
                
                // Get the old and new content
                const oldContent = file.status === 'added' ? '' : await getFileContent(octokit, OWNER, REPO, file.filename, file.previous_filename);
                const newContent = await getFileContent(octokit, OWNER, REPO, file.filename);
                
                // Use expert module to evaluate
                const evaluation = await expertModule.evaluatePrompts(oldContent, newContent, anthropic);
                
                // Add evaluation results to report
                fullReport += evaluation.report || '### Evaluation Results\n\nNo detailed report provided by expert module.\n\n';
                
                // Update overall recommendation based on expert evaluation
                if (evaluation.recommendation === 'REJECT' || evaluation.recommendation === 'REQUEST_CHANGES') {
                  overallRecommendation = 'REQUEST_CHANGES';
                }
                
                if (evaluation.improvement !== undefined) {
                  totalImprovement += evaluation.improvement;
                }
              }
              
              // Add final recommendation - NEVER NEUTRAL
              fullReport += `## üéØ Final Recommendation\n\n`;
              
              if (overallRecommendation === 'APPROVE') {
                fullReport += `### ‚úÖ APPROVE\n\n`;
                fullReport += `The changes are acceptable and ready for merge.\n\n`;
                fullReport += `**Ready to merge** ‚úÖ`;
              } else {
                // All non-APPROVE cases become REQUEST_CHANGES
                fullReport += `### ‚ùå REQUEST CHANGES\n\n`;
                fullReport += `The changes need improvement before merging.\n\n`;
                fullReport += `**Needs revision** ‚ùå`;
              }
              
              // Post comment
              await octokit.issues.createComment({
                owner: OWNER,
                repo: REPO,
                issue_number: PR_NUMBER,
                body: fullReport
              });
              
              // Auto-close PR if not approved and auto-close is enabled
              const autoCloseOnFail = process.env.AUTO_CLOSE_ON_FAIL !== 'false';
              if (overallRecommendation !== 'APPROVE' && autoCloseOnFail) {
                console.log('Closing PR due to failed evaluation...');
                await octokit.pulls.update({
                  owner: OWNER,
                  repo: REPO,
                  pull_number: PR_NUMBER,
                  state: 'closed'
                });
                
                await octokit.issues.createComment({
                  owner: OWNER,
                  repo: REPO,
                  issue_number: PR_NUMBER,
                  body: `üö´ **PR automatically closed** due to failed security evaluation.\n\nPlease address the feedback above and submit a new PR with the improvements.`
                });
              }
              
              console.log('Evaluation completed successfully');
              
            } catch (error) {
              console.error('Evaluation error:', error);
              await octokit.issues.createComment({
                owner: OWNER,
                repo: REPO,
                issue_number: PR_NUMBER,
                body: `‚ùå Evaluation failed: ${error.message}`
              });
              throw error;
            }
          }
          
          async function getFileContent(octokit, owner, repo, path, previousPath) {
            try {
              const { data } = await octokit.repos.getContent({
                owner: owner,
                repo: repo,
                path: previousPath || path,
                ref: process.env.GITHUB_BASE_REF || 'main'
              });
              
              if (data.content) {
                return Buffer.from(data.content, 'base64').toString('utf-8');
              }
            } catch (error) {
              console.log(`Could not fetch previous version of ${path}: ${error.message}`);
            }
            return '';
          }
          
          evaluate().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF
          
          # Run evaluation
          OWNER="${OWNER}" REPO="${REPO}" PR_NUMBER="${{ inputs.pr-number }}" GITHUB_BASE_REF="${{ github.base_ref }}" AUTO_CLOSE_ON_FAIL="${{ inputs.auto-close-on-fail }}" node evaluate.js