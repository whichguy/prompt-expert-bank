name: Prompt Expert

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened, edited]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  claude-respond:
    # Only run if comment contains @prompt-expert
    if: |
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@prompt-expert')) ||
      (github.event_name == 'pull_request_review_comment' && 
       contains(github.event.comment.body, '@prompt-expert')) ||
      (github.event_name == 'pull_request' && 
       contains(github.event.pull_request.body, '@prompt-expert'))
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          sparse-checkout: |
            scripts
            templates
            experts
            package.json
          sparse-checkout-cone-mode: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd scripts
          npm install @anthropic-ai/sdk @octokit/rest

      - name: Get PR/Issue context
        id: context
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "COMMENT_ID=0" >> $GITHUB_ENV
            echo "IS_PR=true" >> $GITHUB_ENV
            # Save body to file to handle multiline content
            cat << 'EOF' > /tmp/comment_body.txt
          ${{ github.event.pull_request.body }}
          EOF
          elif [[ "${{ github.event.issue.pull_request }}" != "" ]]; then
            echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "COMMENT_ID=${{ github.event.comment.id }}" >> $GITHUB_ENV
            echo "IS_PR=true" >> $GITHUB_ENV
            # Save body to file to handle multiline content
            cat << 'EOF' > /tmp/comment_body.txt
          ${{ github.event.comment.body }}
          EOF
          else
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "COMMENT_ID=${{ github.event.comment.id }}" >> $GITHUB_ENV
            echo "IS_PR=false" >> $GITHUB_ENV
            # Save body to file to handle multiline content
            cat << 'EOF' > /tmp/comment_body.txt
          ${{ github.event.comment.body }}
          EOF
          fi
          
          # Read comment body from file
          COMMENT_BODY=$(cat /tmp/comment_body.txt)
          echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
          echo "$COMMENT_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: React to comment
        if: github.event_name != 'pull_request'
        run: |
          if [[ "$IS_PR" == "true" ]]; then
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/issues/comments/${{ env.COMMENT_ID }}/reactions \
              -f content='eyes'
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Claude Code Session
        id: claude
        run: |
          node scripts/claude-code-session-simplified.js
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          COMMENT_BODY: ${{ env.COMMENT_BODY }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
          IS_PR: ${{ env.IS_PR }}

      - name: Handle errors
        if: failure()
        run: |
          ERROR_MSG="❌ Prompt Expert encountered an error. Please check the logs or try again."
          
          if [[ "$IS_PR" == "true" ]]; then
            gh pr comment $PR_NUMBER --body "$ERROR_MSG"
          else
            gh issue comment $ISSUE_NUMBER --body "$ERROR_MSG"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Separate job for prompt evaluation (runs on PR changes to prompt files)
  prompt-evaluation:
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'opened'
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          sparse-checkout: |
            scripts
            templates
            experts
            package.json
          sparse-checkout-cone-mode: false

      - name: Check for prompt changes
        id: check_prompts
        run: |
          # Check if any prompt files changed
          CHANGED_PROMPTS=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E '\.(md|txt)$' | grep -i prompt || true)
          
          if [[ -n "$CHANGED_PROMPTS" ]]; then
            echo "PROMPTS_CHANGED=true" >> $GITHUB_ENV
            echo "Changed prompt files detected:"
            echo "$CHANGED_PROMPTS"
          else
            echo "PROMPTS_CHANGED=false" >> $GITHUB_ENV
            echo "No prompt files changed"
          fi

      - name: Setup Node.js
        if: env.PROMPTS_CHANGED == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        if: env.PROMPTS_CHANGED == 'true'
        run: |
          cd scripts
          npm install @anthropic-ai/sdk @octokit/rest

      - name: Run automatic prompt evaluation
        if: env.PROMPTS_CHANGED == 'true'
        run: |
          # Auto-invoke prompt expert evaluation
          export COMMENT_BODY="@prompt-expert programming evaluate all prompt changes in this PR"
          node scripts/claude-code-session-simplified.js
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          IS_PR: true
          GITHUB_WORKSPACE: ${{ github.workspace }}